package jk.web.workers;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Scanner;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class MySQLtoHSQLConverter {

	private static final Logger LOGGER = LogManager.getLogger();

	public static void convert(String from, String to) throws IOException {
		final String DELIMITER = "\n";

		StringBuilder result;
		try(@SuppressWarnings("resource")
		Scanner scanner = new Scanner(ClassLoader.getSystemClassLoader().getResourceAsStream(from)).useDelimiter("\n")){
			result = new StringBuilder();

			while(scanner.hasNext()){
				String query = scanner.next();
				LOGGER.trace("\n{}", query);
				if(query.isEmpty() || query.startsWith("--") || query.startsWith("SET") || query.startsWith("USE")){
					LOGGER.trace("Skipped");
					continue;
				}
				if(query.startsWith("CREATE SCHEMA")){
					LOGGER.trace("Start");
					result.append("CREATE SCHEMA jk AUTHORIZATION DBA");
					result.append(DELIMITER);
					continue;
				}
				LOGGER.trace("Added");
				result.append(query);
				result.append(DELIMITER);
			}
			replace(result," IF NOT EXISTS", "");
			replace(result,"`", "");
			replace(result,"TINYINT", "boolean");
			replace(result,"AUTO_INCREMENT", "GENERATED BY DEFAULT AS IDENTITY");
			replace(result,"INT(10)", "INTEGER");
			replace(result,"INT(11)", "INTEGER");
			replace(result,"NULL DEFAULT NULL", "");
			replace(result," UNSIGNED", "");
			replace(result,"\t", " ");
			replace(result,"\n", " ");
			replace(result,";", DELIMITER);
			moveDefault(result);
		}
		if(result!=null){
			File file = new File(to);
			try( Writer writer = new OutputStreamWriter(new FileOutputStream(file), "UTF-8");){
				writer.write(result.toString());
			}

			result.toString();
		}
	}

	private static void moveDefault(StringBuilder builder) {
		LOGGER.entry(builder);
	    final String from = "NOT NULL DEFAULT";
        final String to = "DEFAULT";
        final String notNull = " NOT NULL,";
		int index = builder.indexOf(from);
	    while (index != -1){
			builder.replace(index, index + from.length(), to);
	        index += to.length(); // Move to the end of the replacement
			index = builder.indexOf(",", index);
			builder.replace(index, index + 1, notNull);
	        index += notNull.length(); // Move to the end of the replacement
	        index = builder.indexOf(from, index);
	    }
	}

	private static void replace(StringBuilder builder, String from, String to) {
		LOGGER.entry(builder);
	    int index = builder.indexOf(from);
	    while (index != -1){
	        builder.replace(index, index + from.length(), to);
	        index += to.length(); // Move to the end of the replacement
	        index = builder.indexOf(from, index);
	    }
	}
}
